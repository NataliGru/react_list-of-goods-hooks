{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","useState","sortField","setSortField","isReversed","setIsReversed","currentGoods","goods","preparedGoods","sort","good1","good2","Name","localeCompare","Length","length","reverse","getPreparedGoods","isShowResetButton","handleSort","type","className","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,sBAAAA,E,iBAAAA,M,KAsCE,IAAME,EAAgB,WAC3B,IAcuBC,EAdvB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAhCR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,WAETI,EAAa,YAAOD,GAqBxB,OAnBIL,IACFM,EAAgBA,EAAcC,MAAK,SAACC,EAAOC,GACzC,OAAQT,GACN,KAAKL,EAASe,KACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,OAKXX,GACFI,EAAcQ,UAGTR,EAOcS,CAAiBnB,EAAiB,CACrDI,YACAE,eAGIc,EAAoBhB,GAAaE,EAEjCe,EAAa,SAACC,GAAD,OACjB,kBAAMjB,EAAaiB,KAYrB,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACED,KAAK,SACLC,UAAWC,IACT,SACA,UACA,CAAE,WAAYpB,IAAcL,EAASe,OAEvCW,QAASJ,EAAWtB,EAASe,MAP/B,iCAYA,wBACEQ,KAAK,SACLC,UAAWC,IACT,SACA,aACA,CAAE,WAAYpB,IAAcL,EAASiB,SAEvCS,QAASJ,EAAWtB,EAASiB,QAP/B,4BAYA,wBACEM,KAAK,SACLC,UAAWC,IACT,SACA,aACA,CAAE,YAAalB,IAEjBmB,SA3CevB,EA2CQI,EA1C7B,kBAAMC,GAAeL,KAmCjB,qBAYEkB,GAEE,wBACEE,KAAK,SACLC,UAAU,4BACVE,QAjDQ,WAClBpB,EAAa,IACbE,GAAc,IA4CN,sBAUN,6BACGC,EAAakB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCnIlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.cee59828.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\n\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Name = 'alphabetically',\n  Length = 'length',\n}\n\ntype Filters = {\n  sortField: string;\n  isReversed: boolean;\n};\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, isReversed }: Filters,\n) {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods = preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.Name:\n          return good1.localeCompare(good2);\n\n        case SortType.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n\n  const currentGoods = getPreparedGoods(goodsFromServer, {\n    sortField,\n    isReversed,\n  });\n\n  const isShowResetButton = sortField || isReversed;\n\n  const handleSort = (type: SortType) => (\n    () => setSortField(type)\n  );\n\n  const handleReverse = (state: boolean) => (\n    () => setIsReversed(!state)\n  );\n\n  const handleReset = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SortType.Name },\n          )}\n          onClick={handleSort(SortType.Name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortField !== SortType.Length },\n          )}\n          onClick={handleSort(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={handleReverse(isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(isShowResetButton)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={handleReset}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        {currentGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}